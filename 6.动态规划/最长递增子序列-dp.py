"""
@Time:2018/2/22 15:00
@Author:xuzhongyou
"""
#LIS
#LIS是动态规划中最经典的问题之一。
#F[i]来表示以ai结束时它的最长长度。
#假设F[1]和F[x-1]的值已经确定，
#根据分析可得结论:
#F[1]=1
#F[i] = max{1,F[j]+1|aj<ai&&j<i}

#07北大机试题：
#拦截导弹系统，第一炮能到达任意高度，以后每一发不得高于前一发的高度
#这题求得是最长不递增子序列
#F[1] = 1
#F[i] = max{1,F[j+1]|j<i&&ai>=ai}

#8
#300 207 155 300 299 170 158 65

str_ = '300 207 155 300 299 170 158 65'.split(' ')
str_ = [int(item) for item in str_]
lens =len(str_)
dp= [0]*25
for i in range(lens):
    max_num = 1#这边0,1有影响，i为0时不会执行下面的for循环
    for j in range(i):
        if str_[j] >= str_[i]:#注意int问题
            max_num = max(max_num,dp[j]+1)
    dp[i] = max_num
print(max(dp))
#总结：
#不仅可以用来解决单纯的最长递增子序列问题，还可以经过类比来求解其大小关系确定的子序列长度
#第一个意义上的动态规划问题
#动态规划问题的特点：
#将一个问题分割成许多子问题，每个子问题为确定以第i个数字结束的递增子序列最大长度。
#与以排在该数字之前所有比它小的元素结尾的最长递增子序列长度有关，仅与数字量有关，与具体排列无关。
#较小规模的子问题是容易被确定的。类似于递推求解，一步一步求每个子问题的答案。
